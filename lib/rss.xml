<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><parsererror xmlns="http://www.w3.org/1999/xhtml" style="display: block; white-space: pre; border: 2px solid #c77; padding: 0 1em 0 1em; margin: 1em; background-color: #fdd; color: black"><h3>This page contains the following errors:</h3><div style="font-family:monospace;font-size:12px">error on line 95 at column 215: Input is not proper UTF-8, indicate encoding !
Bytes: 0x08 0x42 0x45 0x4A
</div><h3>Below is a rendering of the page up to the first error.</h3></parsererror><channel><title><![CDATA[my_study]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>my_study</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 11 Jul 2024 06:30:02 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 11 Jul 2024 06:29:47 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[투 포인터]]></title><description><![CDATA[ 
 <br><br>
<br><a data-tooltip-position="top" aria-label="https://blog.encrypted.gg/1004" rel="noopener" class="external-link" href="https://blog.encrypted.gg/1004" target="_blank">투포인터 개념</a>
<br><a data-tooltip-position="top" aria-label="https://m.blog.naver.com/kks227/220795165570" rel="noopener" class="external-link" href="https://m.blog.naver.com/kks227/220795165570" target="_blank">슬라이딩 윈도우</a>
<br><br><br>
<br><a data-href="#투 포인터 알고리즘" href="/#투_포인터_알고리즘" class="internal-link" target="_self" rel="noopener">투 포인터 알고리즘</a>
<br><a data-href="#투 포인터의 동작" href="/#투_포인터의_동작" class="internal-link" target="_self" rel="noopener">투 포인터의 동작</a>
<br><a data-href="#투 포인터의 핵심" href="/#투_포인터의_핵심" class="internal-link" target="_self" rel="noopener">투 포인터의 핵심</a>
<br><a data-href="#구간합이 아니더라도" href="/#구간합이_아니더라도" class="internal-link" target="_self" rel="noopener">구간합이 아니더라도</a>
<br><a data-href="#투 포인터와 슬라이딩 윈도우" href="/#투_포인터와_슬라이딩_윈도우" class="internal-link" target="_self" rel="noopener">투 포인터와 슬라이딩 윈도우</a>
<br><br><br>투 포인터 알고리즘은 두개의 포인트를 지정해 배열의 탐색 복잡도를 획기적으로 낮춰주는 알고리즘을 말한다. 투포인터는 일차원 배열에서 부분 집합을 탐색할 때 사용하기 용이하다. <br>예를 들어 배열 내에 합이 특정 수가 되는 연속된 부분 집합을 모두 탐색해야 하는 문제가 존재한다고 생각해보자. 가장 쉽게 접근 하는 방법은 모든 부분 수열을 구한 뒤 각 수열의 합을 구해보는 방식일 것이다.<br>nums = [1,3,4,2,6]
n = 5 #user num
for i in range(len(nums)):
    for j in range(i + 1, len(nums)):
        if sum(nums[i:j]) == n:
            print(nums[i:j])
Copy<br>이는 가장 직관적인 접근 방식이지만, 이와 같은 방법으로 접근할 경우 O(N^2)의 복잡도를 갖게 된다.  하지만 투 포인터로 이 문제를 접근하면 무려 O(N) 으로 복잡도를 줄이는 것이 가능하다.<br><br><br>위의 문제를 투 포인터를 활용해 풀이 해보자. 특정 배열에서 합이 5가 되는 구간을 탐색하는 것이 우리의 목표이다. 투 포인터는 아래와 같은 방식으로 동작한다. <br>
<br>시작 포인터와 끝 포인터는 처음엔 전부 배열의 시작점을 가리킨다.
<br>구간 합이 찾는 값 보다 커지면 스타트 포인터를 뒤로 옮겨 구간을 축소한다.
<br>구간 합이 찾는 값 보다 작으면 엔드 포인트를 옮겨 구간을 확대한다.
<br>시작 포인터와 끝 포인터가 교차 될 때까지 반복한다.
<br>*과.은 포인터를 의미한다

*.  //처음엔 전부 시작점을 가리킨다
| 1 | 2 | 3 | 4 | 2 | 5 | 3 | 1 | 1 | 2 |
sum = 0

*   . //.은 1을 가리킨다
| 1 | 2 | 3 | 4 | 2 | 5 | 3 | 1 | 1 | 2 |
sum = 1

//구간 합이 찾으려는 수보다 작은 경우 구간을 확장한다
*       .    
| 1 | 2 | 3 | 4 | 2 | 5 | 3 | 1 | 1 | 2 |
sum = 3

//구간 합이 탐색하는 수 보다 커졌다
*           .
| 1 | 2 | 3 | 4 | 2 | 5 | 3 | 1 | 1 | 2 |
sum = 6

//구간 합이 찾으려는 수보다 클 경우 구간을 축소한다
	*        . 
| 1 | 2 | 3 | 4 | 2 | 5 | 3 | 1 | 1 | 2 |
sum = 5
Copy<br>이를 통해서 우리는 합의 값이 탐색하는 수와 일치하는 연속하는 부분집합을 찾았다. 주요한 부분은 우리가 연속하는 구간의 합을 구했다는 점이다. 연속하는 구간 합을 축소하기 위해선 앞에서 한칸 씩 줄여가는 수 밖에 없고 확대하기 위해선 뒤에 한칸 씩 늘려가는 수 밖에 없다. <br>만약 연속하지 않는 두 수의 합을 구한다고 생각하면 앞으로 한칸 씩 이동하는 것이 값의 축소를 보장하지 못하고 뒤로 한칸 씩 이동하는 것이 값의 증가를 보장하지 못한다. <br>
.* //동일하게 동작해보자.
| 1 | 7 | 3 | 4 | 2 | 5 | 3 | 1 | 1 | 2 |

.   *  //끝점을 1로 옮기자
| 1 | 7 | 3 | 4 | 2 | 5 | 3 | 1 | 1 | 2 |
sum = 1

.       * // 5보다 합이 커졌다
| 1 | 7 | 3 | 4 | 2 | 5 | 3 | 1 | 1 | 2 |
sum = 8

	.   *  //여전히 합은 7이다
| 1 | 7 | 3 | 4 | 2 | 5 | 3 | 1 | 1 | 2 |

		.*  //시작 포인터와 끝 포인터가 교차하므로 멈춘다
| 1 | 7 | 3 | 4 | 2 | 5 | 3 | 1 | 1 | 2 |
Copy<br>따라서 만약 연속하지 않는 두 수의 합을 투포인터를 통해 탐색하고 싶을 경우 정렬을 통해 앞,뒤로의 이동이 축소와 증가를 보장해야한다. 반면 연속하는 값일 경우 이것이 자연스럽게 보장되므로 별도의 정렬 없이 곧장 투포인터를 활용할 수 있다. 단 배열 안의 모든 원소는 모두 양수여야 한다.<br><br><br>
"그러면 왜 이렇게 시간복잡도를 줄일 수 있는거냐면, 이중 for문에서는 i = 0일 때 j가 0부터 n-1까지 돌고, i = 1일 때 j가 0부터 n-1까지 돌고, 이와 같이 각 i에 대해서 j가 0부터 n-1까지 돕니다. 그리고 이 과정에서 i = 0일 때 계산하면서 얻은 정보가 i = 1일 때에 전혀 쓰이지가 않습니다. 그런데 투 포인터에서는 i = 0일 때 계산하면서 얻은 정보를 i = 1일 때 활용합니다. 그 정보가 포인터의 이동으로 나타납니다"
<br>구간 합 문제를 다시 생각해보자. 시작 포인터와 끝 포인터를 활용함으로써 우리는 해당 구간 합을 반복해서 구할 필요 없이 계속해서 재활용할 수 있다. 기존의 O(n^2) 알고리즘에선 탐색을 진행할 때 마다 구간 합을 다시 구해서 활용했다. 하지만 투 포인터를 활용할 경우 기존에 이미 구해놓은 구간 합에 하나의 원소를 더하거나 빼기만 하면 된다. (캐싱)<br>Info
투 포인터에서 연산 효율성이 발생할 수 있는 까닭은 이전의 결과를 재활용하는 속성 때문이다. 만약 i:j 까지 구간이 형성됐다 하면, i + 1 부터 시작하는 구간은 j 까지의 구간은 확인됐기에 j+1부터 탐색을 진행하면 된다. 
<br><br><br>투 포인터의 핵심은 특정한 포인터 두개를 활용해서 해당 포인터 사이의 결과를 캐싱하고 계속해서 재활용하는 것이다. 구간 합이나 연속 합이라는 키워드가 등장할 때만 활용할 수 있는 알고리즘이 아니라는 것을 명심하자.<br><br>어떠한 수 n을 정렬된 수열에서 두 수의 합으로 구해야하는 상황을 가정해보자. 수열이 정렬돼 있다면 두 수의 합이 n보다 클때 right 값을 점점 줄이기만 하면 된다. (left를 증가시키면 값이 커지기만 할 뿐이므로) 반대로 작다면 left의 값을 키우며 탐색을 진행하면 된다. 이렇게 할 경우 이전의 탐색 결과를 반영해 값을 키우거나 줄이는 것이 가능해 탐색 효율성이 증가한다.  <a data-tooltip-position="top" aria-label="https://leetcode.com/problems/sum-of-square-numbers/description/" rel="noopener" class="external-link" href="https://leetcode.com/problems/sum-of-square-numbers/description/" target="_blank">문제</a><br>def judgeSquareSum(self, c: int) -&gt; bool:
	head, tail = 0, int(math.sqrt(c))
	while head &lt;= tail:
		sum_ = head * head + tail * tail
		if sum_ &lt; c:
			head += 1
		elif sum_ &gt; c:
			tail -= 1
		else:
			return True
	
	return False
Copy<br><br>"문자가 중복되지 않는 연속된 부분 문자열의 최대 길이를 구하라" 와 같은 문제에도 투포인터 알고리즘을 활용할 수 있다. 중복이 발생하면 스타트 포인터를 뒤로 밀고 중복이 발생하지 않으면 엔드 포인터를 뒤로 밀어주면 된다.<br>abcdefag라는 문자열이 존재하면 a는 7번째에서 중복이 발생해 최대 길이가 7이게 된다. 이때 a 다음 b에서 출발하는 문자열은 8번째 부터 탐색을 진행하면 된다. 7번째까지는 연속된다는 것을 이미 파악했기 때문이다.<br>def lengthOfLongestSubstring(self, s: str) -&gt; int:
	max_len = 0
	end = 0
	char_dict = {}
	
	for i, c in enumerate(s):
		if c in char_dict and end &lt;= char_dict[c]:
			end = char_dict[c] + 1 
		else:
			max_len = max(max_len, i - end + 1)
		
		char_dict[c] = i
	return max_len
Copy<br><br><br>위에서 투 포인터를 설명할 때 “연속된”이라는 키워드를 굉장히 강조해가며 설명했다. 마치 투 포인터가 연속되는 수열이나 문자열과 관련된 문제에만 특화된 것 처럼 말이다.<br>하지만 투 포인터의 핵심은 두 개의 포인터가 존재한다는 점이지 연속돼야 한다는 것이 아니다. 연속 됨을 강조해야 하는 알고리즘은 슬라이딩 윈도우이다.<br>투 포인터는 굳이 어떠한 연속된 구간을 생성하지 않아도 된다. 단순히 두 개의 포인터를 활용해 두 요소를 포인팅하는 것도 투 포인터 알고리즘이다.<br>정리
투 포인터는 두 개의 포인터를 활용하는 알고리즘이다. 두 포인터는 어떠한 구간의 시작과 끝으로 사용될 수도 있고 각각의 원소를 가리키는 포인터로 동작할 수도 있다.<br>
투 포인터의 핵심은 연산 효율화이다. 이미 아는 정보를 또 연산할 필요 없이 효율적 탐색을 할 수 있게 해준다. 이때 포인터가 알고있는 정보를 저장하는 주체가 된다.
]]></description><link>algorithm/투-포인터.html</link><guid isPermaLink="false">algorithm/투 포인터.md</guid><pubDate>Tue, 18 Jun 2024 02:50:38 GMT</pubDate></item><item><title><![CDATA[DFS]]></title><description/></item></channel></rss>